#!/bin/sh

# Retreive contextualization information
CS=/tmp/$RANDOM$RANDOM.cinit
rm -rf $CS

# ConfigDrive
echo -n "Trying OpenNebula and ConfigDrive datasource..."
mkdir -p $CS.rom
blkid | grep 'TYPE="iso9660"' | awk -F ':' '{ print $1 }' | while read name; do
  mount -o ro -t iso9660 $name $CS.rom
  if [ -f $CS.rom/context.sh ]; then
    sed -n "s|^ *USER_DATA *= *[\"']*\(.*\)[\"']$|\1|p" $CS.rom/context.sh > $CS
  fi
  if [ -f $CS.rom/ec2/latest/user-data ]; then
    cp $CS.rom/ec2/latest/user-data $CS
  elif [ -f $CS.rom/user-data ]; then
    cp $CS.rom/user-data $CS
  elif [ -f $CS.rom/openstack/latest/user-data ]; then
    cp $CS.rom/openstack/latest/user-data $CS
  fi
  umount $CS.rom
done
rmdir $CS.rom
[ -f $CS ] && echo "got it!" || echo "failed!"

# Amazon EC2
if [ ! -f $CS ]; then
  echo -n "Trying Amazon EC2 datasource..."
  wget -T 5 http://169.254.169.254/latest/user-data -q -O $CS &>/dev/null
  [ -f $CS ] && echo "got it!" || echo "failed!"
fi

# If user data is not provided, nothing to be done
if [[ ! -s $CS ]]; then
  echo "Cannot find any userdata or userdata is empty. Nothing to do..."
  exit 0
fi

# Decode user data (if not already decoded)
if ! [[ "`head -c 12 $CS`" == "Content-Type" || "`head -c 1 $CS`" == "#" ]]; then
  echo "Data source seems to be encoded in base64. I will decode it."
  base64 -d $CS > $CS.new
  mv $CS.new $CS
fi

# Parse MIME encoding if present
BOUNDARY=`head -1 $CS | sed -n "s|^Content-Type: *multipart/mixed; *boundary *= *[\"']*\([^\"']*\)[\"']*$|\1|p"`
if [ -n "$BOUNDARY" ]; then
  echo "Data source seems to be encoded in MIME format. I will decode it."
  awk -v B="$BOUNDARY" -v F="$CS." '{if($0=="--"B"--"){exit}if($0=="--"B){k=k+1;f=F k;getline;s=1;printf "" > f};if(s==1)print $0 >> f}' $CS
  rm -f $CS
fi

# Execute contextualization commands
for f in $CS*; do
  # Skip content-type (if present)
  if [ "`head -c 13 $f`" == "Content-Type:" ]; then
    awk '{if($0==""){s=1;getline;}if(s==1)print $0}' $f > $f.new
    mv $f.new $f
  fi

  # Skip files not containing #
  [ "`head -c 1 $f`" == "#" ] || continue

  # Execute contextualization command
  FIRST_LINE="`head -1 $f`"
  if [ "$FIRST_LINE" == "#!/bin/sh" ]; then
    # This is a shell script, let's just execute it
    echo "Executing Shell contextualization script..."
    sh $f
  else
    # Other formats are unsupported
    echo "Ignoring script starting with `head -1 $f | head -c 100`. Not supported."
  fi

done

exit 0
